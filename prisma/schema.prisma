// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String? // Optional for oAuth Github/Google ...
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  AccountsBank AccountBank[]
  Categories   Categorie[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model AccountBank {
  id      String  @id @default(cuid())
  name    String
  plaidId String?

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]
}

model Categorie {
  id      String  @id @default(cuid())
  name    String
  plaidId String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transaction Transaction[]
}

model Transaction {
  id     String   @id @default(cuid())
  amount Int
  payee  String
  notes  String?
  date   DateTime

  accountBankId String
  accountBank   AccountBank @relation(fields: [accountBankId], references: [id], onDelete: Cascade)

  categorieId String?
  categorie   Categorie? @relation(fields: [categorieId], references: [id], onDelete: SetNull)
}
